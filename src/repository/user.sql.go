// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getCartByUserId = `-- name: GetCartByUserId :many
SELECT p.name, p.price, p.category, p.description, ci.quantity 
FROM carts 
JOIN cart_items as ci on carts.id = ci.cart_id
JOIN products as p on ci.product_id = p.id
WHERE carts.user_id = $1
`

type GetCartByUserIdRow struct {
	Name        string         `json:"name"`
	Price       string         `json:"price"`
	Category    string         `json:"category"`
	Description sql.NullString `json:"description"`
	Quantity    int32          `json:"quantity"`
}

func (q *Queries) GetCartByUserId(ctx context.Context, userID uuid.NullUUID) ([]GetCartByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartByUserIdRow{}
	for rows.Next() {
		var i GetCartByUserIdRow
		if err := rows.Scan(
			&i.Name,
			&i.Price,
			&i.Category,
			&i.Description,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT id, password FROM users WHERE email = $1
`

type LoginRow struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) Login(ctx context.Context, email string) (LoginRow, error) {
	row := q.db.QueryRowContext(ctx, login, email)
	var i LoginRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (name, email, password) 
VALUES ($1, $2, $3)
`

type RegisterUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser, arg.Name, arg.Email, arg.Password)
	return err
}
